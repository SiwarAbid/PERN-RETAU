// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  image    String?
  phone    String?
  address  String?
  provider String  @default("LOCAL")
  role     Role    @default(CLIENT)
  reviews   Review[]
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  lastVisit DateTime?
  isActived  Boolean?
  salary  Float?
  dateEmbauche DateTime? 

  Order Order[]

  Reward Reward[]

  LoyaltyPoint LoyaltyPoint[]
}

enum Role {
  CLIENT
  ADMIN
  CHEF
  EMPLOYEE
  SOUS_CHEF
  SERVER
  AGENT
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  imaage      String?
  description String?
  dishes      Dish[]
}

model Dish {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  price       Int      // Stocker en centimes
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  reviews     Review[]
  createdAt   DateTime @default(now())
  image       String?
  isAvailable Boolean  @default(true)
  rating      Float    @default(0)

  OrderItem OrderItem[]
}


model Review {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  dish      Dish    @relation(fields: [dishId], references: [id])
  userId    Int
  dishId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Restau {
  id          Int     @id @default(autoincrement())
  name        String
  aboutUs     String
  address     String
  phone       String
  email       String
  image       String
  description String
  logo        String
  createdAt   DateTime @default(now())
}

model Contact {
  id        Int     @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Order {
  id          Int      @id @default(autoincrement())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  totalAmount Int      // Stocker en centimes
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime?
  items       OrderItem[]
  payment     Payment?
  deliveryFee Int      @default(0)
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  dish      Dish    @relation(fields: [dishId], references: [id])
  dishId    Int
  quantity  Int
  price     Int      // Stocker en centimes (prix au moment de la commande)
}

model Payment {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int @unique
  amount      Int      // Stocker en centimes
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime?
  paymentMethod String
}

model LoyaltyPoint {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  points    Int      @default(0)
  updatedAt DateTime @updatedAt
}

model Reward {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String   // "plat", "boisson", "dessert", "remise"
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}




// Ensure to run `npx prisma generate` after modifying this schema to update the Prisma Client
// and `npx prisma migrate dev` to apply changes to your database.
// For more information, visit https://pris.ly/d/prisma-schema
// This schema is designed to be used with a PostgreSQL database, as specified in the datasource
// Adjust the provider and URL in the datasource block as needed for your environment.

